import { useState, useEffect, useMemo, useCallback } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Slider } from '@/components/ui/slider';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { BeakerIcon, RefreshCwIcon } from 'lucide-react';

type SolutionType = 'acid' | 'base';

interface TitrationDataPoint {
  volume: number;
  pH: number;
}

const MAX_TITRANT_VOLUME = 100; // Max volume in mL that can be added

export default function AcidBaseTitrationSimulator() {
  const [analyteType, setAnalyteType] = useState<SolutionType>('acid');
  const [analyteVolume, setAnalyteVolume] = useState<number>(50); // Initial volume in mL
  const [analyteConcentration, setAnalyteConcentration] = useState<number>(0.1); // Molarity (M)
  const [titrantConcentration, setTitrantConcentration] = useState<number>(0.1); // Molarity (M)
  const [addedVolume, setAddedVolume] = useState<number>(0); // Volume of titrant added in mL
  const [currentPH, setCurrentPH] = useState<number>(1.0); // Initial pH guess
  const [indicatorColor, setIndicatorColor] = useState<string>('bg-transparent'); // Tailwind class
  const [titrationData, setTitrationData] = useState<TitrationDataPoint[]>([]);

  const titrantType = useMemo(() => (analyteType === 'acid' ? 'base' : 'acid'), [analyteType]);

  const equivalencePointVolume = useMemo(() => {
    if (titrantConcentration === 0) return Infinity;
    return (analyteVolume * analyteConcentration) / titrantConcentration;
  }, [analyteVolume, analyteConcentration, titrantConcentration]);

  const calculatePH = useCallback((volAdded: number): number => {
    const Va = analyteVolume / 1000; // Convert mL to L
    const Ca = analyteConcentration;
    const Vb = volAdded / 1000; // Convert mL to L
    const Cb = titrantConcentration;
    const totalVolume = Va + Vb; // in L

    if (totalVolume <= 0) return analyteType === 'acid' ? -Math.log10(Ca) : 14 + Math.log10(Ca);

    let pH = 7.0;

    try {
      if (analyteType === 'acid') {
        // Titrating Acid with Base
        const initialMolesAcid = Va * Ca;
        const molesBaseAdded = Vb * Cb;

        if (volAdded < equivalencePointVolume) {
          // Before equivalence point
          const remainingMolesAcid = initialMolesAcid - molesBaseAdded;
          const H_concentration = remainingMolesAcid / totalVolume;
          pH = H_concentration > 0 ? -Math.log10(H_concentration) : 7.0; // Avoid log(0)
        } else if (Math.abs(volAdded - equivalencePointVolume) < 1e-6) {
          // At equivalence point (strong acid/strong base)
          pH = 7.0;
        } else {
          // After equivalence point
          const excessMolesBase = molesBaseAdded - initialMolesAcid;
          const OH_concentration = excessMolesBase / totalVolume;
          const pOH = OH_concentration > 0 ? -Math.log10(OH_concentration) : 7.0;
          pH = 14.0 - pOH;
        }
      } else {
        // Titrating Base with Acid
        const initialMolesBase = Va * Ca; // Here Ca is concentration of Base
        const molesAcidAdded = Vb * Cb; // Here Cb is concentration of Acid

        if (volAdded < equivalencePointVolume) {
          // Before equivalence point
          const remainingMolesBase = initialMolesBase - molesAcidAdded;
          const OH_concentration = remainingMolesBase / totalVolume;
          const pOH = OH_concentration > 0 ? -Math.log10(OH_concentration) : 7.0;
          pH = 14.0 - pOH;
        } else if (Math.abs(volAdded - equivalencePointVolume) < 1e-6) {
          // At equivalence point (strong acid/strong base)
          pH = 7.0;
        } else {
          // After equivalence point
          const excessMolesAcid = molesAcidAdded - initialMolesBase;
          const H_concentration = excessMolesAcid / totalVolume;
          pH = H_concentration > 0 ? -Math.log10(H_concentration) : 7.0;
        }
      }
    } catch (error) {
      console.error("Error calculating pH:", error);
      // Return a neutral pH or initial pH in case of calculation errors
      pH = 7.0;
    }

    // Clamp pH to a reasonable range (0-14)
    return Math.max(0, Math.min(14, pH));

  }, [analyteType, analyteVolume, analyteConcentration, titrantConcentration, equivalencePointVolume]);

  // Update pH and indicator color when addedVolume or parameters change
  useEffect(() => {
    const newPH = calculatePH(addedVolume);
    setCurrentPH(newPH);

    // Phenolphthalein simulation
    if (newPH < 8.2) {
      setIndicatorColor('bg-transparent');
    } else {
      setIndicatorColor('bg-pink-300');
    }

    // Update titration data for the graph
    const newDataPoint = { volume: addedVolume, pH: newPH };
    setTitrationData(prevData => {
      // Add new point and keep it sorted by volume
      const updatedData = [...prevData.filter(p => p.volume !== addedVolume), newDataPoint];
      updatedData.sort((a, b) => a.volume - b.volume);
      return updatedData;
    });

  }, [addedVolume, calculatePH]);

  // Reset data when parameters change significantly
  useEffect(() => {
    setAddedVolume(0);
    const initialPH = calculatePH(0);
    setCurrentPH(initialPH);
    setTitrationData([{ volume: 0, pH: initialPH }]);
     if (initialPH < 8.2) {
      setIndicatorColor('bg-transparent');
    } else {
      setIndicatorColor('bg-pink-300');
    }
  }, [analyteType, analyteVolume, analyteConcentration, titrantConcentration, calculatePH]);

  const handleReset = () => {
    setAddedVolume(0);
    const initialPH = calculatePH(0);
    setCurrentPH(initialPH);
    setTitrationData([{ volume: 0, pH: initialPH }]);
     if (initialPH < 8.2) {
      setIndicatorColor('bg-transparent');
    } else {
      setIndicatorColor('bg-pink-300');
    }
  };

  const handleAnalyteVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(e.target.value);
    if (!isNaN(value) && value > 0) {
      setAnalyteVolume(value);
    }
  };

  const handleAnalyteConcentrationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(e.target.value);
    if (!isNaN(value) && value > 0) {
      setAnalyteConcentration(value);
    }
  };

  const handleTitrantConcentrationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(e.target.value);
    if (!isNaN(value) && value > 0) {
      setTitrantConcentration(value);
    }
  };

  return (
    <div className="flex flex-col lg:flex-row items-start justify-center min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8 gap-6">
      <Card className="w-full lg:w-1/3">
        <CardHeader>
          <CardTitle>Titration Setup</CardTitle>
          <CardDescription>Configure the initial conditions for the titration.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="analyte-type">Analyte (in Flask)</Label>
            <Select value={analyteType} onValueChange={(value: SolutionType) => setAnalyteType(value)}>
              <SelectTrigger id="analyte-type">
                <SelectValue placeholder="Select analyte type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="acid">Strong Acid</SelectItem>
                <SelectItem value="base">Strong Base</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-2">
            <Label htmlFor="analyte-volume">Analyte Volume (mL)</Label>
            <Input
              id="analyte-volume"
              type="number"
              value={analyteVolume}
              onChange={handleAnalyteVolumeChange}
              min="1"
              step="1"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="analyte-concentration">Analyte Concentration (M)</Label>
            <Input
              id="analyte-concentration"
              type="number"
              value={analyteConcentration}
              onChange={handleAnalyteConcentrationChange}
              min="0.001"
              step="0.01"
            />
          </div>
          <div className="space-y-2">
            <Label>Titrant (in Burette)</Label>
            <Input value={titrantType === 'acid' ? 'Strong Acid' : 'Strong Base'} readOnly className="bg-gray-100" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="titrant-concentration">Titrant Concentration (M)</Label>
            <Input
              id="titrant-concentration"
              type="number"
              value={titrantConcentration}
              onChange={handleTitrantConcentrationChange}
              min="0.001"
              step="0.01"
            />
          </div>
        </CardContent>
         <CardFooter>
            <Button onClick={handleReset} variant="outline" className="w-full">
              <RefreshCwIcon className="mr-2 h-4 w-4" /> Reset Simulation
            </Button>
          </CardFooter>
      </Card>

      <div className="flex flex-col w-full lg:w-2/3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Simulation</CardTitle>
            <CardDescription>Add titrant using the slider and observe the changes.</CardDescription>
          </CardHeader>
          <CardContent className="flex flex-col sm:flex-row items-center justify-around gap-6">
            {/* Visualization */}
            <div className="flex items-end justify-center gap-4 w-full sm:w-auto">
              {/* Burette */}
              <div className="flex flex-col items-center">
                <Label className="mb-1 text-xs text-gray-600">Burette ({titrantType})</Label>
                <div className="relative w-8 h-64 bg-gray-200 border border-gray-400 rounded-t-md">
                  <div
                    className="absolute bottom-0 left-0 right-0 bg-blue-400 transition-all duration-100"
                    style={{ height: `${(1 - addedVolume / MAX_TITRANT_VOLUME) * 100}%` }}
                  ></div>
                   {/* Stopcock */}
                   <div className="absolute bottom-[-10px] left-1/2 transform -translate-x-1/2 w-10 h-2 bg-gray-500 rounded"></div>
                   <div className="absolute bottom-[-20px] left-1/2 transform -translate-x-1/2 w-2 h-3 bg-gray-400"></div>
                </div>
              </div>
              {/* Flask */}
              <div className="flex flex-col items-center">
                 <Label className="mb-1 text-xs text-gray-600">Flask ({analyteType})</Label>
                <div className={`relative w-24 h-32 border-2 border-gray-500 rounded-b-full rounded-t-lg flex items-end justify-center overflow-hidden`}>
                    <div className={`absolute bottom-0 left-0 right-0 h-1/2 ${indicatorColor} transition-colors duration-300`}></div>
                    <BeakerIcon className="w-full h-full text-gray-500 opacity-10 absolute top-0 left-0" />
                </div>
              </div>
            </div>

            {/* Controls & Readouts */}
            <div className="w-full sm:w-1/2 space-y-4">
              <div className="space-y-2">
                <Label htmlFor="volume-slider">Volume of Titrant Added: {addedVolume.toFixed(1)} mL</Label>
                <Slider
                  id="volume-slider"
                  min={0}
                  max={MAX_TITRANT_VOLUME}
                  step={0.1}
                  value={[addedVolume]}
                  onValueChange={(value) => setAddedVolume(value[0])}
                />
              </div>
              <div className="text-center p-4 border rounded-md bg-gray-50">
                <p className="text-sm font-medium text-gray-600">Current pH</p>
                <p className="text-2xl font-bold text-indigo-600">{currentPH.toFixed(2)}</p>
              </div>
               <div className="text-center p-2 border rounded-md bg-yellow-50 border-yellow-200">
                <p className="text-sm font-medium text-yellow-800">Equivalence Point (calculated)</p>
                <p className="text-lg font-semibold text-yellow-900">
                  {equivalencePointVolume === Infinity ? 'N/A' : `${equivalencePointVolume.toFixed(1)} mL`}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Titration Curve</CardTitle>
            <CardDescription>pH vs. Volume of Titrant Added</CardDescription>
          </CardHeader>
          <CardContent className="h-64 sm:h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                data={titrationData}
                margin={{ top: 5, right: 20, left: 0, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis
                    dataKey="volume"
                    type="number"
                    label={{ value: 'Volume Added (mL)', position: 'insideBottomRight', offset: -5 }}
                    domain={[0, MAX_TITRANT_VOLUME]}
                    allowDataOverflow={true}
                 />
                <YAxis
                    dataKey="pH"
                    type="number"
                    label={{ value: 'pH', angle: -90, position: 'insideLeft' }}
                    domain={[0, 14]}
                 />
                <Tooltip formatter={(value: number) => value.toFixed(2)} />
                <Legend />
                <Line type="monotone" dataKey="pH" stroke="#4f46e5" strokeWidth={2} dot={false} activeDot={{ r: 6 }} />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
